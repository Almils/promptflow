generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  role      String    @default("member")
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  conversations Conversation[]
  messages      Message[]
  communityPosts CommunityPost[]
  comments      CommunityComment[] @relation("UserComments")

  upvotedPrompts         Prompt[]        @relation("PromptUpvotes")
  upvotedCommunityPosts  CommunityPost[] @relation("CommunityUpvotes")

  points Int @default(0)
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  prompts   Prompt[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?   // ✅ optional
}

model Message {
  id             String       @id @default(cuid())
  role           String
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
}

model Prompt {
  id        String   @id @default(cuid())
  prompt    String
  model     String
  response  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  // ✅ Relation to Conversation
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])

  // ✅ Upvotes
  upvotes   Int     @default(0)
  upvotedBy User[]  @relation("PromptUpvotes")
}

model CommunityPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  CommunityComment[] @relation("PostComments")

  upvotes   Int      @default(0)
  upvotedBy User[]   @relation("CommunityUpvotes")
}

model CommunityComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String

  post      CommunityPost @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  author    User          @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
}
